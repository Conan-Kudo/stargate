#!/usr/bin/env python3

import os
import signal
import subprocess
import sys

stargate_version = "stargate"

# When respawning, give the old process a chance to garbage collect first
if "--delay" in sys.argv:
    sys.argv.remove("--delay")
    import time
    time.sleep(2)

def start_stargate():
    from sglib.log import LOG, setup_logging
    setup_logging()
    LOG.info(f"sys.argv == {sys.argv}")
    from sgui.sgqt import QApplication, QGuiApplication, QtCore
    from sgui.util import setup_theme
    try:
        QGuiApplication.setHighDpiScaleFactorRoundingPolicy(
            QtCore.Qt.HighDpiScaleFactorRoundingPolicy.PassThrough,
        )
    except Exception as ex:
        LOG.warning(
            "Unable to set QGuiApplication.setHighDpiScaleFactorRoundingPolicy"
            f" {ex}"
        )
    app = QApplication(sys.argv)
    scaler = setup_theme(app)
    from sgui.splash import SplashScreen
    splash_screen = SplashScreen(scaler.y_res)
    from sgui.main import main
    main(app, splash_screen, scaler)

# Run the engine
if len(sys.argv) > 1:
    def sig_handle(a_1=None, a_2=None):
        try:
            f_proc.kill()
        except Exception as ex:
            print(f"Exception while stopping engine: {ex}")

    signal.signal(signal.SIGTERM, sig_handle)
    signal.signal(signal.SIGINT, sig_handle)
    signal.signal(signal.SIGABRT, sig_handle)

    engine_exe = f"{stargate_version}-engine"
    # local development
    f_path = os.path.join(
        os.path.dirname(__file__),
        "..",
        "engine",
        engine_exe
    )
    if not os.path.exists(f_path):
        # system
        print(
            "Could not detect local development engine, trying system engine"
        )
        f_path = os.path.join(
            os.path.dirname(__file__),
            engine_exe
        )
    f_path = os.path.abspath(f_path)
    cmd_args = [f_path] + sys.argv[1:]
    print(f"Running command {cmd_args}")
    f_proc = subprocess.Popen(cmd_args)
    f_proc.wait()
    print(f"helper script:  f_proc returned with {f_proc.returncode}")
    sys.exit(f_proc.returncode)
else:  # Run the UI, which will run the engine
    f_prefix_dir = os.path.dirname(__file__)
    f_path = os.path.join(
        f_prefix_dir,
        "..",
    )
    f_path = os.path.abspath(f_path)
    print(f'Adding PYTHONPATH {f_path}')
    sys.path.insert(0, f_path)
    try:
        start_stargate()
    except ImportError:
        print(
            "Did not detect local development environment, trying "
            "system installation",
        )
        f_path = os.path.join(
            f_prefix_dir,
            "..",
            "lib",
            stargate_version,
            "stargate",
        )
        f_path = os.path.abspath(f_path)
        print(f'Adding PYTHONPATH {f_path}')
        sys.path.insert(0, f_path)
        start_stargate()

