#!/usr/bin/env python3

import argparse
import os
import signal
import subprocess
import sys
import time

stargate_version = "stargate"

def parse_args():
    parser = argparse.ArgumentParser(
        description="Launch Stargate DAW",
    )
    parser.add_argument(
        'project_file',
        default=None,
        help='The project file to open',
        nargs='?',
    )
    args = parser.parse_args()
    assert os.path.basename(args.project_file) == 'stargate.project', \
        f"File must be /path/to/stargate.project, got {args.project_file}"
    return args

def qt_message_handler(mode, context, message):
    line = (
        f'qt_message_handler: {mode} '
        f'{context.file}:{context.line}:{context.function}'
        f' "{message}"'
    )
    if mode == QtCore.QtMsgType.QtWarningMsg:
        LOG.warning(line)
    elif mode in (
        QtCore.QtMsgType.QtCriticalMsg,
        QtCore.QtMsgType.QtFatalMsg,
    ):
        LOG.error(line)
    else:
        LOG.info(line)

def start_stargate(project_file):
    global LOG, QtCore
    from sglib.log import LOG, setup_logging
    setup_logging()
    LOG.info(f"sys.argv == {sys.argv}")
    from sgui.sgqt import QApplication, QGuiApplication, QtCore
    QtCore.qInstallMessageHandler(qt_message_handler)
    from sgui.util import setup_theme
    try:
        QGuiApplication.setHighDpiScaleFactorRoundingPolicy(
            QtCore.Qt.HighDpiScaleFactorRoundingPolicy.PassThrough,
        )
    except Exception as ex:
        LOG.warning(
            "Unable to set QGuiApplication.setHighDpiScaleFactorRoundingPolicy"
            f" {ex}"
        )
    app = QApplication(sys.argv)
    scaler = setup_theme(app)
    from sgui.splash import SplashScreen
    splash_screen = SplashScreen(scaler.y_res)
    from sgui.main import main
    main(app, splash_screen, scaler, project_file)

def main():
    # When respawning, give the old process a chance to garbage collect first
    if "--delay" in sys.argv:
        sys.argv.remove("--delay")
        time.sleep(1)

    args = parse_args()
    f_prefix_dir = os.path.dirname(__file__)
    f_path = os.path.join(
        f_prefix_dir,
        "..",
    )
    f_path = os.path.abspath(f_path)
    print(f'Adding PYTHONPATH {f_path}')
    sys.path.insert(0, f_path)
    try:
        start_stargate(args.project_file)
    except ImportError:
        print(
            "Did not detect local development environment, trying "
            "system installation",
        )
        f_path = os.path.join(
            f_prefix_dir,
            "..",
            "lib",
            stargate_version,
            "stargate",
        )
        f_path = os.path.abspath(f_path)
        print(f'Adding PYTHONPATH {f_path}')
        sys.path.insert(0, f_path)
        start_stargate(args.project_file)

if __name__ == "__main__":
    main()
